const CodeMirror = require('codemirror')
const { remote } = require('electron')

require('codemirror/mode/javascript/javascript')
require('codemirror/addon/edit/matchbrackets')

const opts = {
  lineNumbers: JSON.parse(window.localStorage.lineNumbers || 'false'),
  styleActiveLine: false,
  matchBrackets: true,
  theme: window.localStorage.theme || 'light',
  renderer: true
}

const editor = CodeMirror.fromTextArea(
  document.getElementById('editor'),
  Object.assign({}, opts, { autofocus: true })
)

const output = CodeMirror.fromTextArea(
  document.getElementById('output'),
  Object.assign({}, opts, { readOnly: true })
)

setTimeout(() => {
  editor.refresh()
  output.refresh()
}, 128)

let sandbox = new remote.BrowserWindow({
  width: 450,
  height: 400,
  minWidth: 150,
  minHeight: 200,
  title: 'Document Window'
})

sandbox.loadURL(`file://${__dirname}/../../../static/blank.html`)

sandbox.webContents.on('did-finish-load', () => {
  const str = window.localStorage.input || ''
  editor.setValue(str)
  render(str)
})

if (!window.localStorage.sandbox) {
  sandbox.hide()
}

async function render (s) {
  window.localStorage.input = s
  const chunks = s.split(/\n\n\n/)
  const sections = []
  let i = 0

  while (i < chunks.length) {
    const str = chunks[i++]
    const height = str.split('\n').length

    if (str.trim() === '') {
      sections.push({ content: str, height, whitespace: true })
    }

    const result = await sandbox.webContents.executeJavaScript(`
      try {
        eval(\`${str.replace(/`/g, '\\`')}\`)
      } catch (ex) {
        ex.message
      }
    `)

    sections.push({ content: String(result), height })
  }

  let out = sections.map(chunk => {
    if (chunk.whitespace) {
      return Array(chunk.height + 1).join('\n')
    }

    if (!chunk.content) return

    const height = chunk.content.split('\n').length
    const offset = chunk.height - height
    const padding = Array((offset > 0 ? offset : 0) + 1).join('\n')
    return padding + chunk.content
  })

  output.setValue(out.filter(Boolean).join('\n\n\n'))
}

let renderTimeout = null

editor.on('change', event => {
  const str = editor.getValue()
  clearTimeout(renderTimeout)
  renderTimeout = setTimeout(() => render(str), 512)
})

window.events.on('sandbox', () => {
  if (window.localStorage.sandbox) {
    sandbox.hide()
    delete window.localStorage.sandbox
  } else {
    sandbox.show()
    window.localStorage.sandbox = true
  }
})

window.events.on('editor:theme', name => {
  editor.setOption('theme', name)
  output.setOption('theme', name)
})

window.events.on('editor:linenumbers', () => {
  const state = opts.lineNumbers = !opts.lineNumbers
  window.localStorage.lineNumbers = state
  editor.setOption('lineNumbers', state)
  output.setOption('lineNumbers', state)
})
