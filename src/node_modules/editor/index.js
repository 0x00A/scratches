const CodeMirror = require('codemirror')

require('codemirror/mode/javascript/javascript')
require('codemirror/addon/edit/matchbrackets')

const vm = require('vm')

const opts = {
  lineNumbers: JSON.parse(window.localStorage.lineNumbers || 'false'),
  styleActiveLine: false,
  matchBrackets: true,
  theme: window.localStorage.theme || 'light'
}

const editor = CodeMirror.fromTextArea(
  document.getElementById('editor'),
  Object.assign({}, opts, { autofocus: true })
)

const output = CodeMirror.fromTextArea(
  document.getElementById('output'),
  Object.assign({}, opts, { readOnly: true })
)

{
  const str = window.localStorage.input || ''
  editor.setValue(str)
  render(str)
}

setTimeout(() => {
  editor.refresh()
  output.refresh()
}, 128)

function render (str) {
  window.localStorage.input = str
  const chunks = str.split(/\n\n\n/).map(str => {
    const height = str.split('\n').length

    if (str.trim() === '') {
      return { content: str, height, whitespace: true }
    }

    try {
      const script = new vm.Script(str)

      const sandbox = {
        console,
        global,
        window,
        document
      }

      const context = vm.createContext(sandbox)
      const ret = script.runInNewContext(context)

      return { content: String(ret), height }
    } catch (ex) {
      return { content: ex.message, height }
    }
  })

  let out = chunks.map(chunk => {
    if (chunk.whitespace) {
      return Array(chunk.height + 1).join('\n')
    }

    const height = chunk.content.split('\n').length
    const offset = chunk.height - height
    const padding = Array((offset > 0 ? offset : 0) + 1).join('\n')
    return padding + chunk.content
  })

  output.setValue(out.filter(Boolean).join('\n\n\n'))
}

let renderTimeout = null

editor.on('change', event => {
  const str = editor.getValue()
  clearTimeout(renderTimeout)
  renderTimeout = setTimeout(() => render(str), 512)
})

window.events.on('editor:theme', name => {
  editor.setOption('theme', name)
  output.setOption('theme', name)
})

window.events.on('editor:linenumbers', () => {
  const state = opts.lineNumbers = !opts.lineNumbers
  window.localStorage.lineNumbers = state
  editor.setOption('lineNumbers', state)
  output.setOption('lineNumbers', state)
})
